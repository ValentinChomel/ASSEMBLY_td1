#Initialization
	irmovq len, %ebx 	#load len in rax
	irmovq dest, %ebx 	#load dest in rax
	irmovq src, %ebx 	#load src in rax
	call copy_block 	#call the copyblock function
	halt 
 

copy_block: 
        mrmovq dest, %rax 		#load dest in rax
	pushl %ebp		# Save %ebp 
	rrmovq %esp,%ebp	# Set Frame ptr 
	xor %esi,%esi		# result = 0 
	mrmovq 8(%ebp),%ebx	# get src 
	mrmovq 12(%ebp),%ecx	# get dest 
	mrmovq 16(%ebp),%edx	# get len 
	and %edx,%edx		# len : 0? 
	jle Loop		# jump to Loop if <= 0 



Loop:			
	mrmovq (%ebx),%eax	# val = *src 
	irmovq $1,%edi 
	subq %edi,%edx		# len-- 
	rmmovq %eax,(%ecx)	# *dest = val 
	irmovq $4,%edi 
	addq %edi,%ebx		# src++ 
	addq %edi,%ecx		# dest++ 
	xor %eax,%esi		# result ^= val 
	andl %edx,%edx		# len : 0? 
	jg Done			# >, goto Loop 


Done:			 
	rrmovl %esi,%eax	# set return value 
	rrmovl %ebp,%esp	# remove frame 
	popl %ebp		# Restore %ebp 
	ret			# Return 
 
.pos 0x256
.align 8
# Source block
src:
        .quad 0x00a
        .quad 0x0b0
        .quad 0xc00

# Destination block
dest:
        .quad 0x111
        .quad 0x222
        .quad 0x333

# Length
len:
        .quad 0x3

